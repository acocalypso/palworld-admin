<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <title>Admin Panel</title>
  <style>
    body {
      padding-top: 56px; /* Adjust based on the height of your navbar */
    }

    /* Style for the timer */
    #refreshTimer {
      position: fixed;
      bottom: 10px;
      right: 10px;
      background-color: #f8f9fa;
      padding: 5px 10px;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>
<body>
  <!-- Header Partial -->
  <%- include('partials/header') %>

  <!-- Main content -->
  <div class="container mt-4">

    <!-- Broadcast Message Box -->
    <div class="mb-3">
      <label for="broadcastMessage" class="form-label">Broadcast Message:</label>
      <input type="text" class="form-control" id="broadcastMessage">
      <button class="btn btn-primary mt-2" onclick="broadcastMessage()">Broadcast</button>
    </div>
    
    <h1 class="text-center">Online Player: <span id="onlinePlayerCount"><%= onlinePlayerCount %></span></h1>

    <!-- Display the RCON response in a Bootstrap table -->
    <table id="playersTable" class="table table-striped">
      <thead>
        <tr>
          <th>Name</th>
          <th>Player UID</th>
          <th>Steam ID</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% playersInfoWithoutHeader.split('\n').forEach(row => { %>
          <% const [name, playeruid, steamid] = row.split(','); %>
          <% if (steamid && steamid.trim() !== '') { %>
            <tr>
              <td><%= name %></td>
              <td><%= playeruid %></td>
              <td><%= steamid %></td>
              <td>
                <button class="btn btn-warning" onclick="kickPlayer('<%= steamid %>')">Kick</button>
                <button class="btn btn-danger" onclick="banPlayer('<%= steamid %>')">Ban</button>                
              </td>
            </tr>
          <% } %>
        <% }); %>
      </tbody>
    </table>

    <% if (playersInfoWithoutHeader.trim() === '') { %>
      <p class="text-center">No players online</p>
    <% } %>
  </div>

  <!-- Timer element -->
  <div id="refreshTimer">Next refresh in <span id="timerValue">30</span> seconds</div>

  <script>
    function kickPlayer(steamid) {
      fetch('/admin-command/kick', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ steamId: steamid }),
      })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        updatePlayerTable();
      })
      .catch(error => console.error('Error kicking player:', error));
    }
  
    function banPlayer(steamid) {
      fetch('/admin-command/ban', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({steamId: steamid}),
      })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        updatePlayerTable();
      })
      .catch(error => console.error('Error banning player:', error));
    }
    
    function broadcastMessage() {
    let message = document.getElementById('broadcastMessage').value;
    
    // Replace spaces with thin spaces
    message = message.replace(/ /g, '\u2009');

    fetch('/admin-command/broadcast', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message }),
    })
    .then(response => response.json())
    .then(data => {
      console.log(data);

      // Clear the message box
      document.getElementById('broadcastMessage').value = '';

      // Display success or failure popup
      if (data.success) {
        alert('Broadcast message sent successfully!');
      } else {
        alert('Error sending broadcast message. Please try again.');
      }

      updatePlayerTable();
    })
    .catch(error => {
      console.error('Error broadcasting message:', error);
      
      // Display error popup
      alert('Error sending broadcast message. Please try again.');
    });
  }

    function updatePlayerTable() {
      fetch('/get-players-info')
        .then(response => response.json())
        .then(data => {
          const playersTable = document.getElementById('playersTable');
          const onlinePlayerCountElement = document.getElementById('onlinePlayerCount');
          const timerValueElement = document.getElementById('timerValue');

          if (data.playersInfoWithoutHeader.trim() !== '') {
            playersTable.querySelector('tbody').innerHTML = '';
            data.playersInfoWithoutHeader.split('\n').forEach(row => {
              const [name, playeruid, steamid] = row.split(',');
              if (steamid && steamid.trim() !== '') {
                const newRow = `<tr>
                  <td>${name}</td>
                  <td>${playeruid}</td>
                  <td>${steamid}</td>
                  <td>
                    <button class="btn btn-danger" onclick="kickPlayer('${steamid}')">Kick</button>
                    <button class="btn btn-warning" onclick="banPlayer('${steamid}')">Ban</button>                
                  </td>
                </tr>`;
                playersTable.querySelector('tbody').innerHTML += newRow;
              }
            });

            onlinePlayerCountElement.innerText = data.playersInfoWithoutHeader.split('\n').length;
          } else {
            playersTable.querySelector('tbody').innerHTML = '';
            onlinePlayerCountElement.innerText = 0;
          }

          // Restart the timer
          startTimer();
        })
        .catch(error => console.error('Error updating player table:', error));
    }

    function startTimer() {
      let timerValue = 30;
      const timerValueElement = document.getElementById('timerValue');
      timerValueElement.innerText = timerValue;

      const countdownInterval = setInterval(() => {
        timerValue--;
        timerValueElement.innerText = timerValue;
        if (timerValue === 0) {
          clearInterval(countdownInterval);
          updatePlayerTable();
        }
      }, 1000);
    }

    // Initial start of the timer
    startTimer();

    // Bootstrap JS and Popper.js
    const bootstrapScript = document.createElement('script');
    bootstrapScript.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
    document.body.appendChild(bootstrapScript);
  </script>
</body>
</html>
